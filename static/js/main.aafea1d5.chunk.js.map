{"version":3,"sources":["components/JobBoard.js","App.js","serviceWorker.js","index.js"],"names":["JobBoard","job","addFilter","class","src","logo","alt","company","new","type","featured","position","postedAt","contract","location","languages","map","lang","name","onClick","App","useState","jobs","setJobs","filter","setFilter","filterlist","setFilterlist","useEffect","data","e","length","tempSkills","skill","includes","target","window","alert","removeFilter","removedItem","indexOf","splice","filteredSkills","flatMap","item","console","log","jobsarray","className","key","id","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aafea1d5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst JobBoard = ({job, addFilter}) => {\r\n  return (\r\n  <div>\r\n    <div class=\"d-flex flex-row px-5 pt-3 bd-highlight\">\r\n    {/* Image */}\r\n      <div class=\"p-2 pt-4 bd-highlight\"><img src={job.logo} alt={job.company}/></div>\r\n    {/* \r\n    --  Job info --\r\n    */}\r\n      <div class=\"p-2 bd-highlight ml-4\">\r\n        <div class=\"d-flex flex-column bd-highlight mb-3\">\r\n          <div class=\"d-inline p-2 bd-highlight\">\r\n            <h3 class=\"d-inline align-middle\">{job.company}</h3>\r\n            <div class=\"d-inline\">\r\n              {job.new && (<button type=\"button\" class=\"btn btn-success rounded-pill ml-3\">New</button>)}\r\n            </div>\r\n            <div class=\"d-inline\">\r\n              {job.featured && (<button type=\"button\" class=\"btn btn-dark rounded-pill ml-3\">Featured</button>)}\r\n            </div>\r\n          </div>\r\n          <div class=\"p-2 bd-highlight\"><h4>{job.position}</h4></div>\r\n          <div class=\"p-2 bd-highlight\"><p>{job.postedAt} * {job.contract} * {job.location}</p></div>\r\n        </div>\r\n      </div>\r\n    {/* \r\n     -- Skills --\r\n    */}\r\n      <div class=\"p-2 flex-fill bd-highlight\">\r\n        <div class=\"d-flex flex-row-reverse bd-highlight\">\r\n          <div class=\"p-2 bd-highlight\">\r\n            {job.languages.map((lang) => (\r\n              <button type=\"button\" name={lang} onClick={addFilter} class=\"btn btn-success ml-3\">{lang}</button>\r\n              ))\r\n            }\r\n           </div>\r\n        </div>\r\n      </div>\r\n\r\n        \r\n    </div>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default JobBoard;\r\n","import React, {useState, useEffect} from 'react';\nimport JobBoard from './components/JobBoard'\nimport './App.css';\nimport './style.css';\nimport data from './data/data.json'\n\n\nfunction App() {\n  const [jobs, setJobs] = useState([]);\n  const [filter, setFilter] = useState([]);\n  const [filterlist, setFilterlist] = useState([]);\n\n  useEffect(() => {\n    setJobs(data);\n  }, [])\n  \nconst addFilter = (e) => {\n \n    // check if array is empty\n    if(filter.length === 0){\n      let tempSkills = [...jobs];\n      tempSkills = tempSkills.filter(skill => skill.languages.includes(e.target.name));\n      setFilterlist(tempSkills)\n      setFilter([e.target.name])\n    }\n    else {\n      //check if filter is already in array\n      if(filter.includes(e.target.name) === false)\n      {\n        let tempSkills = filterlist.filter(skill => skill.languages.includes(e.target.name));\n        setFilterlist(tempSkills)\n        setFilter([...filter, e.target.name])\n      }\n      else {\n       window.alert(\"Filter is already added\")\n      }\n    }\n\n  \n      \n}\n\nconst removeFilter = (e) => {\n  let tempSkills = [...jobs]\n  var removedItem = filter.indexOf(e.target.name)\n  filter.splice(removedItem, 1);\n  var filteredSkills = filter.flatMap(item => tempSkills.filter(skill => skill.languages.includes(item)));\n  console.log(filterlist);\n  setFilterlist(filteredSkills);\n  \n}\nlet jobsarray = []\nfilterlist.length === 0 ? (jobsarray = [...jobs]) : (jobsarray = [...filterlist])\n\n  return (\n    <div className=\"container-md  bg-main\">\n      <h1 className=\"font-weight-bolder text-center p-5\">Job Board</h1>\n        <div className=\"text-center\">\n        {\n        /* ---- Show filters if exists ------- */ \n        filter.length !== 0 && filter.map(item => (\n            <span class=\"badge badge-dark ml-3 p-0\">\n              <h3>{item}\n                <button type=\"button\" className=\"but-remove\" onClick={removeFilter} name={item}>X</button>           \n              </h3>\n            </span>\n              ))\n        }\n        </div>\n        \n      {\n      /* ---- Show filtered jobs ------- */         \n          jobsarray === 0 ? \n          (\n            <p>Jobs are Loading...</p>\n          ) : \n          (\n            <div class=\"d-flex flex-column bd-highlight mb-3\">\n              {jobsarray.map(job => (\n                <div class=\"p-2 bd-highlight bg-light m-2\">\n                  <JobBoard job={job} key={job.id} addFilter={addFilter}/>\n                </div>\n                ))\n              }\n            </div>\n          )         \n      }\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}